xquery version "3.0" encoding "UTF-8";
import module namespace pjson = "http://keeleleek.ee/pextract/pjson" at "./karp-json.xqm";
import module namespace lmf = "http://keeleleek.ee/lmf" at "./lmf.xqm";
import module namespace giellatekno = "http://giellatekno.uit.no" at "./giellatekno.xqm";


(:~
 : This script converts the LMF lexical resource into the root.lexc
 : representation used in the Giellatekno infrastructure.
 : 
 : @author Kristian Kankainen
 : @version 1.0
 :)


(: Read in the LMF :)
let $lmf := doc("../data/lmf.xml")

(: Create the list of tags for the parts of speeches :)
let $pos-list := 
  for $partofspeech in distinct-values($lmf//MorphologicalPattern/feat[@att="partOfSpeech"]/@val/data())
    return concat("+", $giellatekno:get-fst-pos($partofspeech))

(: Create the list of paradigm name tags :)
let $paradigm-tag-list :=
  distinct-values(
    for $paradigm in $lmf//MorphologicalPattern
      return giellatekno:paradigm-to-lexc-tag($paradigm)
  )

(: Create the Root lexicon :)
let $root-lexc := string-join((
  "LEXICON Root",
  $lmf//MorphologicalPattern/feat[@att="partOfSpeech"]/@val/data()
    => distinct-values()
    => $giellatekno:get-tests-pos()
    => concat("s")
    => concat(" ;")
    => lower-case()
), out:nl())


(: A header with more information as well :)
let $header := string-join((
  "!!! This file was automatically generated by Votic extract morphology",
  "!!! more information at https://github.com/kristiank/MA-thesis",
  ""
),out:nl())


(: Put together the full file contents :)
let $lexc := string-join((
  $header,
  "Multichar_Symbols",
  out:nl() || "! Parts of Speeches",
  string-join($pos-list, out:nl()),
  out:nl() || "! Paradigm tags (used in the continuation lexicons)",
  string-join($paradigm-tag-list, out:nl()),
  out:nl() || "! Root lexicon",
  string-join($root-lexc, out:nl()),
  ""
), out:nl()
)

(: Write to file :)
return
    file:write-text(
      "/home/kristian/Projektid/MA-thesis/data/giellatekno/morphology/root.lexc",
      $lexc
    )
